syntax = "proto3";

service TicTacToe {
  rpc JoinGame(JoinGameRequest) returns (JoinGameResponse) {}
  rpc StartGame(StartGameRequest) returns (StartGameResponse) {}
  rpc AssignSymbol(AssignSymbolRequest) returns (AssignSymbolResponse) {}
  rpc FetchSymbols(FetchSymbolsRequest) returns (FetchSymbolsResponse) {}
  rpc PlayerSendCommand(PlayerSendCommandRequest) returns (PlayerSendCommandResponse) {}
  rpc CoordinatorAcceptCommand(CoordinatorAcceptCommandRequest) returns (CoordinatorAcceptCommandResponse) {}
  rpc CoordinatorSendCommandResult(CoordinatorSendCommandResultRequest) returns (CoordinatorSendCommandResultResponse) {}
  rpc SetNodeTime(SetNodeTimeRequest) returns (SetNodeTimeResponse) {}
}

// timestamp variable type depends on your implementation
// we send timestamps with each request/reply
// server has to check node_id's from the request to determine if the request is from a leader/client node

message JoinGameRequest {
  string timestamp = 1;
}

message JoinGameResponse {
  int32 node_id = 1;
}

// Client sends message that it is ready
message StartGameRequest {
  string timestamp = 1;
  int32 node_id = 2;
}

// Server informs clients about their role and
// for players symbols assigned to them (X or O)
message StartGameResponse {
  bool success = 1;
  bool is_leader = 2;
}

message AssignSymbolRequest {
  int32 node_id = 1;
}

message AssignSymbolResponse {
  string symbol = 1;
}

message FetchSymbolsRequest {
}

message FetchSymbolsResponse {
  bool success = 1;
  map<int32, string> players = 2;
}

message PlayerSendCommandRequest {
  int32 node_id = 1;
  string command = 2;
  repeated string args = 3;
}

message PlayerSendCommandResponse {
  bool success = 1;
  string message = 2;
}

message CoordinatorAcceptCommandRequest {
}

message CoordinatorAcceptCommandResponse {
  int32 node_id = 1;
  string command = 2;
  repeated string args = 3;
}

message CoordinatorSendCommandResultRequest {
  bool success = 1;
  string message = 2;
}

message CoordinatorSendCommandResultResponse {
  bool success = 1;
}

message SetNodeTimeRequest {
  int32 node_id = 1;
  string timestamp = 2;
}

message SetNodeTimeResponse {
  string result = 1;
}