syntax = "proto3";

service TicTacToe {
  rpc LeaderAssignSymbols(SymbolsMessage) returns (SymbolsResult) {}
  rpc CommandRequest(CommandRequestMessage) returns (CommandReplyResult) {}    // to communicate with client nodes through the server
  rpc StartGameRequest(StartGameRequestMessage) returns (StartGameReplyResult) {}
}

// timestamp variable type depends on your implementation
// we send timestamps with each request/reply
// server has to check node_id's from the request to determine if the request is from a leader/client node

// client sends message that it is ready
message StartGameRequestMessage {
  string StartGame = 1;
  int id = 1;
}

// server informs clients about who
// is the player and who is the leader
message StartGameReplyResult {
  boolean AssignmentResult = 0;
}

// server sends info to the leader
message CommandReplyResult {
  map<int32, int32> timestamps = 1;
  string command = 2;
  string symbol = 3;    // which symbol to put...
  repeated int32 position = 4;    // ...at which position
}

// leader sends info to server
message SymbolsMessage {
  map<int32, int32> timestamps = 1;   // dict <node_id, clock_time>
  map<int32, string> symbols = 2;    // dict <client_id, symbol> 
  int32 node_id = 3;
}

// server replies if the symbols are transmitted to clients successfully
message SymbolResult {
  map<int32, int32> timestamps = 1;
  bool success = 2;
}

// leader requests server to provide it with a command from a client node
message CommandRequestMessage {
  map<int32, int32> timestamps = 1;
  int32 node_id = 2;
  // do we need to specify smth else here?
}

// server sends info to the leader
message CommandReplyResult {
  map<int32, int32> timestamps = 1;
  string command = 2;
  string symbol = 3;    // which symbol to put...
  repeated int32 position = 4;    // ...at which position
}

_____________________________________________________________________________ // remove this delimiter :)


// you can elaborate on this method for client request to a server
message CommandMessage {
  map<int32, int32> timestamps = 1;
  string command = 2;
  string symbol = 3;    // which symbol to put...
  repeated int32 position = 4;    // ...at which position
  int32 node_id = 5;
}