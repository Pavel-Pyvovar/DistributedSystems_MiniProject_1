syntax = "proto3";

service TicTacToe {
  rpc JoinGame(JoinGameRequest) returns (JoinGameResponse) {}
  rpc StartGame(StartGameRequest) returns (StartGameResponse) {}
  rpc AssignSymbol(AssignSymbolRequest) returns (AssignSymbolResponse) {}
  rpc FetchSymbols(FetchSymbolsRequest) returns (FetchSymbolsResponse) {}
  rpc SetSymbol(SetSymbolRequest) returns (SetSymbolResponse) {}
  rpc CommandRequest(CommandRequestMessage) returns (CommandReplyResult) {}    // to communicate with client nodes through the server
  rpc SetNodeTime(SetNodeTimeRequest) returns (SetNodeTimeResponse) {}
}

// timestamp variable type depends on your implementation
// we send timestamps with each request/reply
// server has to check node_id's from the request to determine if the request is from a leader/client node

message JoinGameRequest {
  string timestamp = 1;
}

message JoinGameResponse {
  int32 node_id = 1;
}

// Client sends message that it is ready
message StartGameRequest {
  string timestamp = 1;
  int32 node_id = 2;
}

// Server informs clients about their role and
// for players symbols assigned to them (X or O)
message StartGameResponse {
  bool success = 1;
  bool is_leader = 2;
}

// Player sends info to server about its next turn
message SetSymbolRequest {
  map<int32, int32> timestamps = 1;   // dict <node_id, clock_time>
  map<int32, string> symbols = 2;    // dict <client_id, symbol>
  int32 node_id = 3;
}

message AssignSymbolRequest {
  int32 node_id = 1;
}

message AssignSymbolResponse {
  string symbol = 1;
}

message FetchSymbolsRequest {
}

message FetchSymbolsResponse {
  bool success = 1;
  map<int32, string> players = 2;
}


// server replies if the symbols are transmitted to clients successfully
message SetSymbolResponse {
  map<int32, int32> timestamps = 1;
  bool success = 2;
}

message SetNodeTimeRequest {
  int32 node_id = 1;
  string timestamp = 2;
}

message SetNodeTimeResponse {
  string result = 1;
}

// server sends info to the leader
message CommandReplyResult {
  map<int32, int32> timestamps = 1;
  string command = 2;
  string symbol = 3;    // which symbol to put...
  repeated int32 position = 4;    // ...at which position
}

// leader requests server to provide it with a command from a client node
message CommandRequestMessage {
  map<int32, int32> timestamps = 1;
  int32 node_id = 2;
  // do we need to specify smth else here?
}

// you can elaborate on this method for client request to a server
message CommandMessage {
  map<int32, int32> timestamps = 1;
  string command = 2;
  string symbol = 3;    // which symbol to put...
  repeated int32 position = 4;    // ...at which position
  int32 node_id = 5;
}

// Broadcast a message to start the game